/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/lenses': {
    /**
     * Get all lenses.
     * @description This can only be done by the logged in user.
     */
    get: operations['getLenses']
    /**
     * Create a new lens.
     * @description This can only be done by the logged in user.
     */
    post: operations['postLenses']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    Lens: {
      id?: string
      name: string
      description?: string
      spec: components['schemas']['Spec']
      /** Format: date-time */
      created_at?: string
      /** Format: date-time */
      updated_at?: string
      /** Format: date-time */
      deleted_at?: string
    }
    Error: {
      /** Format: int32 */
      code?: number
      message?: string
    }
    /** @description This is the schema for the Service Lens specification. */
    Spec: {
      version?: string
      name?: string
      description?: string
      pillars?: components['schemas']['Pillar'][]
    }
    Pillar: {
      id: string
      name: string
      description?: string
      questions?: components['schemas']['Question'][]
      resources?: components['schemas']['Resource'][]
    }
    Question: {
      id: string
      title: string
      description?: string
      choices?: components['schemas']['Choice'][]
      resources?: components['schemas']['Resource'][]
      risks?: components['schemas']['Risk'][]
    }
    Choice: {
      id: string
      title: string
      resources?: components['schemas']['Resource'][]
      improvements?: components['schemas']['Improvement'][]
    }
    Resource: {
      description?: string
      url?: string
    }
    Risk: {
      risk?: string
      condition?: string
    }
    Improvement: {
      description?: string
      url?: string
    }
  }
  responses: {
    /** @description The specified resource was not found */
    NotFound: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
    /** @description Unauthorized */
    Unauthorized: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
    /** @description Forbidden */
    Forbidden: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
    /** @description Bad Request */
    BadRequest: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
    /** @description Internal Server Error */
    InternalServerError: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: {
    AddLensBody?: {
      content: {
        'application/json': components['schemas']['Lens']
      }
    }
  }
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Get all lenses.
   * @description This can only be done by the logged in user.
   */
  getLenses: {
    responses: {
      /** @description A list of lenses */
      200: {
        content: {
          'application/json': components['schemas']['Lens'][]
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      500: components['responses']['InternalServerError']
    }
  }
  /**
   * Create a new lens.
   * @description This can only be done by the logged in user.
   */
  postLenses: {
    requestBody: components['requestBodies']['AddLensBody']
    responses: {
      /** @description A new lens is created */
      200: {
        content: {
          'application/json': components['schemas']['Lens']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      500: components['responses']['InternalServerError']
    }
  }
}
