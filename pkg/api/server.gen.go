// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new lens
	// (POST /v1/lens)
	AddLens(c *fiber.Ctx) error
	// Delete a lens
	// (DELETE /v1/lens/{id})
	DeleteLens(c *fiber.Ctx, id string) error
	// Get a lens
	// (GET /v1/lens/{id})
	GetLens(c *fiber.Ctx, id string) error
	// List all lenses
	// (GET /v1/lenses)
	ListLenses(c *fiber.Ctx) error
	// Add a new workload
	// (POST /v1/workload)
	AddWorkload(c *fiber.Ctx) error
	// Get a workload
	// (GET /v1/workload/{id})
	GetWorkload(c *fiber.Ctx, id string) error
	// List all workloads
	// (GET /v1/workloads)
	ListWorkloads(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// AddLens operation middleware
func (siw *ServerInterfaceWrapper) AddLens(c *fiber.Ctx) error {

	return siw.Handler.AddLens(c)
}

// DeleteLens operation middleware
func (siw *ServerInterfaceWrapper) DeleteLens(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.DeleteLens(c, id)
}

// GetLens operation middleware
func (siw *ServerInterfaceWrapper) GetLens(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetLens(c, id)
}

// ListLenses operation middleware
func (siw *ServerInterfaceWrapper) ListLenses(c *fiber.Ctx) error {

	return siw.Handler.ListLenses(c)
}

// AddWorkload operation middleware
func (siw *ServerInterfaceWrapper) AddWorkload(c *fiber.Ctx) error {

	return siw.Handler.AddWorkload(c)
}

// GetWorkload operation middleware
func (siw *ServerInterfaceWrapper) GetWorkload(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetWorkload(c, id)
}

// ListWorkloads operation middleware
func (siw *ServerInterfaceWrapper) ListWorkloads(c *fiber.Ctx) error {

	return siw.Handler.ListWorkloads(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/v1/lens", wrapper.AddLens)

	router.Delete(options.BaseURL+"/v1/lens/:id", wrapper.DeleteLens)

	router.Get(options.BaseURL+"/v1/lens/:id", wrapper.GetLens)

	router.Get(options.BaseURL+"/v1/lenses", wrapper.ListLenses)

	router.Post(options.BaseURL+"/v1/workload", wrapper.AddWorkload)

	router.Get(options.BaseURL+"/v1/workload/:id", wrapper.GetWorkload)

	router.Get(options.BaseURL+"/v1/workloads", wrapper.ListWorkloads)

}

type AddLensRequestObject struct {
	Body *AddLensJSONRequestBody
}

type AddLensResponseObject interface {
	VisitAddLensResponse(ctx *fiber.Ctx) error
}

type AddLens200JSONResponse Lens

func (response AddLens200JSONResponse) VisitAddLensResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type AddLens400Response struct {
}

func (response AddLens400Response) VisitAddLensResponse(ctx *fiber.Ctx) error {
	ctx.Status(400)
	return nil
}

type DeleteLensRequestObject struct {
	Id string `json:"id"`
}

type DeleteLensResponseObject interface {
	VisitDeleteLensResponse(ctx *fiber.Ctx) error
}

type DeleteLens200JSONResponse Lens

func (response DeleteLens200JSONResponse) VisitDeleteLensResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetLensRequestObject struct {
	Id string `json:"id"`
}

type GetLensResponseObject interface {
	VisitGetLensResponse(ctx *fiber.Ctx) error
}

type GetLens200JSONResponse Lens

func (response GetLens200JSONResponse) VisitGetLensResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListLensesRequestObject struct {
}

type ListLensesResponseObject interface {
	VisitListLensesResponse(ctx *fiber.Ctx) error
}

type ListLenses200JSONResponse struct {
	Items  *[]Lens `json:"items,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Total  *int    `json:"total,omitempty"`
}

func (response ListLenses200JSONResponse) VisitListLensesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type AddWorkloadRequestObject struct {
	Body *AddWorkloadJSONRequestBody
}

type AddWorkloadResponseObject interface {
	VisitAddWorkloadResponse(ctx *fiber.Ctx) error
}

type AddWorkload200Response struct {
}

func (response AddWorkload200Response) VisitAddWorkloadResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GetWorkloadRequestObject struct {
	Id string `json:"id"`
}

type GetWorkloadResponseObject interface {
	VisitGetWorkloadResponse(ctx *fiber.Ctx) error
}

type GetWorkload200JSONResponse Workload

func (response GetWorkload200JSONResponse) VisitGetWorkloadResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListWorkloadsRequestObject struct {
}

type ListWorkloadsResponseObject interface {
	VisitListWorkloadsResponse(ctx *fiber.Ctx) error
}

type ListWorkloads200JSONResponse struct {
	Items  *[]Workload `json:"items,omitempty"`
	Limit  *int        `json:"limit,omitempty"`
	Offset *int        `json:"offset,omitempty"`
	Total  *int        `json:"total,omitempty"`
}

func (response ListWorkloads200JSONResponse) VisitListWorkloadsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a new lens
	// (POST /v1/lens)
	AddLens(ctx context.Context, request AddLensRequestObject) (AddLensResponseObject, error)
	// Delete a lens
	// (DELETE /v1/lens/{id})
	DeleteLens(ctx context.Context, request DeleteLensRequestObject) (DeleteLensResponseObject, error)
	// Get a lens
	// (GET /v1/lens/{id})
	GetLens(ctx context.Context, request GetLensRequestObject) (GetLensResponseObject, error)
	// List all lenses
	// (GET /v1/lenses)
	ListLenses(ctx context.Context, request ListLensesRequestObject) (ListLensesResponseObject, error)
	// Add a new workload
	// (POST /v1/workload)
	AddWorkload(ctx context.Context, request AddWorkloadRequestObject) (AddWorkloadResponseObject, error)
	// Get a workload
	// (GET /v1/workload/{id})
	GetWorkload(ctx context.Context, request GetWorkloadRequestObject) (GetWorkloadResponseObject, error)
	// List all workloads
	// (GET /v1/workloads)
	ListWorkloads(ctx context.Context, request ListWorkloadsRequestObject) (ListWorkloadsResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AddLens operation middleware
func (sh *strictHandler) AddLens(ctx *fiber.Ctx) error {
	var request AddLensRequestObject

	var body AddLensJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AddLens(ctx.UserContext(), request.(AddLensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddLens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AddLensResponseObject); ok {
		if err := validResponse.VisitAddLensResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteLens operation middleware
func (sh *strictHandler) DeleteLens(ctx *fiber.Ctx, id string) error {
	var request DeleteLensRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLens(ctx.UserContext(), request.(DeleteLensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteLensResponseObject); ok {
		if err := validResponse.VisitDeleteLensResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLens operation middleware
func (sh *strictHandler) GetLens(ctx *fiber.Ctx, id string) error {
	var request GetLensRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetLens(ctx.UserContext(), request.(GetLensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetLensResponseObject); ok {
		if err := validResponse.VisitGetLensResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListLenses operation middleware
func (sh *strictHandler) ListLenses(ctx *fiber.Ctx) error {
	var request ListLensesRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListLenses(ctx.UserContext(), request.(ListLensesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListLenses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListLensesResponseObject); ok {
		if err := validResponse.VisitListLensesResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddWorkload operation middleware
func (sh *strictHandler) AddWorkload(ctx *fiber.Ctx) error {
	var request AddWorkloadRequestObject

	var body AddWorkloadJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AddWorkload(ctx.UserContext(), request.(AddWorkloadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddWorkload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(AddWorkloadResponseObject); ok {
		if err := validResponse.VisitAddWorkloadResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetWorkload operation middleware
func (sh *strictHandler) GetWorkload(ctx *fiber.Ctx, id string) error {
	var request GetWorkloadRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkload(ctx.UserContext(), request.(GetWorkloadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkload")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetWorkloadResponseObject); ok {
		if err := validResponse.VisitGetWorkloadResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListWorkloads operation middleware
func (sh *strictHandler) ListWorkloads(ctx *fiber.Ctx) error {
	var request ListWorkloadsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkloads(ctx.UserContext(), request.(ListWorkloadsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkloads")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListWorkloadsResponseObject); ok {
		if err := validResponse.VisitListWorkloadsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9yVQW/bPAyG/4rB7zsadbrt5FuLAUWxAi1WDD0MPWgWk6qTJU1SEgSG//sgyXaURG5a",
	"NOvS3RzSoV4+Jl81UMlaSYHCGigbOCf0K/6ao7HuVyWFReEfiVKcVcQyKYpHI4WLmeoBa+Ke/tc4hRL+",
	"K9bVipA1RVSybdscKJpKM+UqQekOzIZ0Djo8nkvK0As6o/QKhTm0qK7suaQrp8rp6lLRoT5bNqC0VKht",
	"p2hDfwN2pRBKMFYzMXMtyKVAncwYhVUyYcnMl2YWa5N+IwSI1sQJHgLyxyNWnpwT/HKxjCbDgtR4TM3d",
	"kBkTpO9is0XOamajukxYnKH2aqdTgyM5Ky3hqVTq/Dupf3JJ6MsBo1gwoaWou5F95RfYFedCTEzljhg/",
	"EdnZzSXkYJnl7k+3qBeswixKLVCb8P7pyeRk4rEpFEQxKOGjD+WgiH3w7RaL04L3kybDQjoc/ttcUij7",
	"3YF4l1dj67ix7sXWrns7MEoKE1B/mEwOtv9eYsKObudVhca4sz+F456wKzf187omehX6zkgmcJnx0H6Y",
	"++/gf967l3t4RcNoG2pztLjL8LOPdxgV0aRGi9pVa4A5Ge57QD8kboQCbaaRQmn1HPOIw/YI3f8Frtdf",
	"tnCFFjMyQiuHGSaG6wLtP03lAu0okmiAgsIkoStmPCIMG/iKhgjn11MP96nWImdu821zHCx/eNhPaf91",
	"cP8cko5DRjjPeA8jxokR0GXs7WOWNlwAO7Z2kAEZyvvWNod2xAb39L+2o+Vaeo+gDyUoDN7UTdeYRYV4",
	"hOVdLeQm7+da1R6S+a5Z/WE+ap6Y1rmi5A2+zFEswdsPwzdP9znDcBx6w43yMg94+na5G956bxfMGtyh",
	"L5llxCQJuG1/BwAA///94/yGag8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
