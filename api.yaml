openapi: 3.1.0
info:
  title: Service Lens API
  description: This is the Service Lens API documentation.
  version: 0.0.1
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://api.example.com/v1
  - url: http://staging-api.example.com
jsonSchemaDialect: https://spec.openapis.org/oas/3.1/dialect/base
security:
  - bearerAuth: []
paths:
  /lenses:
    # GET /lenses
    # Get all lenses.
    get:
      operationId: getLenses
      summary: Get all lenses.
      description: |
        This can only be done by the logged in user.
      responses:
        '200':    # status code
          description: A list of lenses
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Lens'
        '401':    # status code
          $ref: '#/components/responses/Unauthorized'
        '403':    # status code
          $ref: '#/components/responses/Forbidden'
        '500':    # status code
          $ref: '#/components/responses/InternalServerError'

    # POST /lenses
    # Create a new lens.
    post:
      operationId: postLenses
      summary: Create a new lens.
      description: |
        This can only be done by the logged in user.
      requestBody:
        $ref: '#/components/requestBodies/AddLensBody'
      responses:
        '200':    # status code
          description: A new lens is created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Lens'
        '400':    # status code
          $ref: '#/components/responses/BadRequest'
        '401':    # status code
          $ref: '#/components/responses/Unauthorized'
        '403':    # status code
          $ref: '#/components/responses/Forbidden'
        '500':    # status code
          $ref: '#/components/responses/InternalServerError'

components:
  requestBodies:
    AddLensBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lens'
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Lens:
      type: object
      required:
        - name
        - spec
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        spec:
          $ref: '#/components/schemas/Spec'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Spec:
      $schema: 'http://json-schema.org/draft-06/schema#' # optional identifier for the schema
      description: |
        This is the schema for the Service Lens specification.
      type: object
      properties:
        version:
          type: string
        name:
          type: string
        description:
          type: string
        pillars:
          type: array
          items:
            $ref: '#/components/schemas/Pillar'
    
    # Pillar is a top level category of questions
    Pillar:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/Resource'

    # Question is a question in a pillar.
    Question:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
        risks:
          type: array
          items:
            $ref: '#/components/schemas/Risk'
    
    # Choice is a choice in a question.
    Choice:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
        title:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
        improvements:
          type: array
          items:
            $ref: '#/components/schemas/Improvement'
    
    # Resource is a resource in a question.
    Resource:
      type: object
      properties:
        description:
          type: string
        url:
          type: string
    
    # Risk is a risk in a question.
    Risk:
      type: object
      properties:
        risk:
          type: string
        condition:
          type: string
    
    # Improvement is an improvement in a question.
    Improvement:
      type: object
      properties:
        description:
          type: string
        url:
          type: string

      